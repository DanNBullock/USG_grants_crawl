# generated by datamodel-codegen:
#   filename:  grantDistillOS_Schema.yaml
#   timestamp: 2023-04-19T15:50:25+00:00

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field


class Prefixes(BaseModel):
    linkml: str


class Example(BaseModel):
    value: Union[int, str]


class grantid(BaseModel):
    description: str
    examples: List[Example]
    identifier: bool


class Example1(BaseModel):
    value: str


class grantingagencyorg(BaseModel):
    description: str
    examples: List[Example1]
    ifabsent: Any


class grantingsubdivision(BaseModel):
    description: str
    examples: List[Example1]
    ifabsent: Any


class grantvalue(BaseModel):
    description: str
    range: str
    ifabsent: float


class grantbegindate(BaseModel):
    description: str
    range: str
    ifabsent: Any


class grantenddate(BaseModel):
    description: str
    range: str
    ifabsent: Any


class amendmentdates(BaseModel):
    description: str
    multivalued: bool
    ifabsent: List


class grantrecipientindividual(BaseModel):
    description: str
    multivalued: bool
    ifabsent: Any
    examples: List[Example1]


class grantrecipientorg(BaseModel):
    description: str
    examples: List[Example1]


class Example5(BaseModel):
    value: List[str]


class worktype(BaseModel):
    description: str
    multivalued: bool
    range: str
    ifabsent: List
    examples: List[Example5]


class workdomain(BaseModel):
    description: str
    multivalued: bool
    range: str
    ifabsent: List
    examples: List[Example5]


class opensciencetraits(BaseModel):
    description: str
    multivalued: bool
    range: str
    ifabsent: List
    examples: List[Example5]


class attributes(BaseModel):
    grantid: grantid
    grantingagencyorg: grantingagencyorg
    grantingsubdivision: grantingsubdivision
    grantvalue: grantvalue
    grantbegindate: grantbegindate
    grantenddate: grantenddate
    amendmentdates: amendmentdates
    grantrecipient_individual: grantrecipientindividual
    grantrecipient_org: grantrecipientorg
    worktype: worktype
    workdomain: workdomain
    opensciencetraits: opensciencetraits


class grantrecord(BaseModel):
    #tree_root: tree_root
    attributes: attributes


class Classes(BaseModel):
    grantrecord: grantrecord


class Research(BaseModel):
    description: str


class Curation(BaseModel):
    description: str


class ServiceProvision(BaseModel):
    description: str


class Coordination(BaseModel):
    description: str


class InfrastructureDevops(BaseModel):
    description: str


class Implementation(BaseModel):
    description: str


class PermissibleValues(BaseModel):
    research: Research
    curation: Curation
    service_provision: ServiceProvision = Field(..., alias='service provision')
    coordination: Coordination
    infrastructure_devops: InfrastructureDevops = Field(
        ..., alias='infrastructure devops'
    )
    implementation: Implementation


class worktype1(BaseModel):
    description: str
    permissible_values: PermissibleValues


class Biosciences(BaseModel):
    description: str


class PysicalSciences(BaseModel):
    description: str


class Engineering(BaseModel):
    description: str


class Mathematics(BaseModel):
    description: str


class SocialSciences(BaseModel):
    description: str


class Interdisciplinary(BaseModel):
    description: str


class PermissibleValues1(BaseModel):
    biosciences: Biosciences
    pysical_sciences: PysicalSciences = Field(..., alias='pysical sciences')
    engineering: Engineering
    mathematics: Mathematics
    social_sciences: SocialSciences = Field(..., alias='social sciences')
    interdisciplinary: Interdisciplinary


class workdomain1(BaseModel):
    description: str
    permissible_values: PermissibleValues1


class DataSharing(BaseModel):
    description: str


class DataStorage(BaseModel):
    description: str


class MetadataStandards(BaseModel):
    description: str


class Metadata(BaseModel):
    description: str


class DataRepositories(BaseModel):
    description: str


class DataManagement(BaseModel):
    description: str


class DataCuration(BaseModel):
    description: str


class DataCitation(BaseModel):
    description: str


class DataReuse(BaseModel):
    description: str


class MetadataSchema(BaseModel):
    description: str


class DataQuality(BaseModel):
    description: str


class DataPrivacy(BaseModel):
    description: str


class DataSecurity(BaseModel):
    description: str


class DataAccess(BaseModel):
    description: str


class OpenAccess(BaseModel):
    description: str


class PublicAccess(BaseModel):
    description: str


class OpenData(BaseModel):
    description: str


class OpenSource(BaseModel):
    description: str


class DataSharingAgreement(BaseModel):
    description: str


class DataScience(BaseModel):
    description: str


class Database(BaseModel):
    description: str


class Python(BaseModel):
    description: str


class Workflow(BaseModel):
    description: str


class ResearchData(BaseModel):
    description: str


class AcademicLibraries(BaseModel):
    description: str


class CitizenScience(BaseModel):
    description: str


class Repositories(BaseModel):
    description: str


class PermissibleValues2(BaseModel):
    data_sharing: DataSharing = Field(..., alias='data sharing')
    data_storage: DataStorage = Field(..., alias='data storage')
    metadata_standards: MetadataStandards = Field(..., alias='metadata standards')
    metadata: Metadata
    data_repositories: DataRepositories = Field(..., alias='data repositories')
    data_management: DataManagement = Field(..., alias='data management')
    data_curation: DataCuration = Field(..., alias='data curation')
    data_citation: DataCitation = Field(..., alias='data citation')
    data_reuse: DataReuse = Field(..., alias='data reuse')
    metadata_schema: MetadataSchema = Field(..., alias='metadata schema')
    data_quality: DataQuality = Field(..., alias='data quality')
    data_privacy: DataPrivacy = Field(..., alias='data privacy')
    data_security: DataSecurity = Field(..., alias='data security')
    data_access: DataAccess = Field(..., alias='data access')
    open_access: OpenAccess = Field(..., alias='open access')
    public_access: PublicAccess = Field(..., alias='public access')
    open_data: OpenData = Field(..., alias='open data')
    open_source: OpenSource = Field(..., alias='open source')
    data_sharing_agreement: DataSharingAgreement = Field(
        ..., alias='data sharing agreement'
    )
    data_science: DataScience = Field(..., alias='data science')
    database: Database
    python: Python
    workflow: Workflow
    research_data: ResearchData = Field(..., alias='research data')
    academic_libraries: AcademicLibraries = Field(..., alias='academic libraries')
    citizen_science: CitizenScience = Field(..., alias='citizen science')
    repositories: Repositories


class opensciencetraits1(BaseModel):
    description: str
    permissible_values: PermissibleValues2


class Enums(BaseModel):
    worktype: worktype1
    workdomain: workdomain1
    opensciencetraits: opensciencetraits1


class Model(BaseModel):
    id: str
    name: str
    title: str
    description: str
    license: str
    prefixes: Prefixes
    keywords: List[str]
    version: float
    imports: List[str]
    default_range: str
    classes: Classes
    enums: Enums
