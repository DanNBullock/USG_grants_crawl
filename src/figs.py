"""
This set of functions is for the production of figures


"""

def plotNullValue_barPlot(dataCompletenessDF,figSize=(10,5)):
    """
    This function takes in the table generated by analyzeData.quantifyDataCompleteness, which outputs:

    dataCompletenessDF : pandas dataframe
        A pandas dataframe with two columns:  the first column is the field name and the second column is the number of empty / null values for that field.
        The last row is the total number of records assessed.

    and produces a seaborn-based bar plot of the number of null values for each field.
    The last row is omitted from the plot, as it is the total number of records assessed, 
    but it is used to set the y-axis limits.

    Input:
        dataCompletenessDF : pandas dataframe
            A pandas dataframe with two columns:  the first column is ('fieldName'): the field name and the second column ('numEmpty') is the number of empty / null values for that field.
            The last row is the total number of records assessed.  Generated by analyzeData.quantifyDataCompleteness
        figSize : tuple
            A tuple of two integers, the first being the width of the figure and the second being the height of the figure.
        
    Output:
        fig : matplotlib figure object
            A figure object containing the bar plot of the number of null values for each field.
    """  
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np
    import pandas as pd

    # get the max value from the last row of the dataframe
    maxVal = dataCompletenessDF.iloc[-1,1]

    # remove the last row from the dataframe
    dataCompletenessDF = dataCompletenessDF.iloc[:-1,:]

    # create a figure
    fig,ax = plt.subplots(figsize=figSize)

    # go through the column names and remove all newlines
    dataCompletenessDF['fieldName'] = dataCompletenessDF['fieldName'].str.replace('\n','')
    # determine if the field names look like camel case, and if so, add a newline before the third capital if the line is more than 30 characters long
    # first, get the length of the field names
    fieldNameLengths = dataCompletenessDF['fieldName'].str.len()
    # get the indices of the field names that are longer than 30 characters
    longFieldNames = fieldNameLengths > 30
    # get the field names that are longer than 30 characters
    longFieldNames = dataCompletenessDF.loc[longFieldNames,'fieldName']
    # get the indices of the field names that are camel case
    camelCaseFieldNames = longFieldNames.str.contains('[a-z][A-Z]')
    # get the field names that are camel case
    camelCaseFieldNames = longFieldNames.loc[camelCaseFieldNames]
    # get the indices of the field names that are camel case and longer than 30 characters
    camelCaseFieldNames = camelCaseFieldNames.index
    # add a newline before the third capital letter
    dataCompletenessDF.loc[camelCaseFieldNames,'fieldName'] = dataCompletenessDF.loc[camelCaseFieldNames,'fieldName'].str.replace('([a-z])([A-Z])','\\1\n\\2',regex=True)
    #hopefully that should prevent a bit of clutter

    # plot the data
    sns.barplot(x='fieldName',y='numEmpty',data=dataCompletenessDF,ax=ax)
    # set the y-axis limits
    ax.set_ylim([0,maxVal])
    # set the x axis labels to be rotated 60 degrees
    ax.set_xticklabels(ax.get_xticklabels(),rotation=90)
    # set the title
    ax.set_title('Number of null values per field')
    # set the y axis label
    ax.set_ylabel('Number of null values')
    # set the x axis label
    ax.set_xlabel('Field name')

    # if there were any long field names, change the font size of the x axis labels
    if len(longFieldNames) > 0:
        ax.tick_params(axis='x',labelsize=8)
        # also reduce the spacing between separate lines of text in the x axis labels by modifyin the linespacing parameter
        for label in ax.get_xticklabels():
            label.set_linespacing(0.3)



    # TODO: implement some adaptivness here to log scale the y axis if a sufficient number of values are too small relative to the max value
    
    return fig

def plotWordCount_histogram(wordCountDF,figSize=(10,5),binSize=3):
    """
    Takes the resultsDF from wordCountForField and plots a histogram of the word counts
    
    input:
        wordCountDF : pandas dataframe
            A pandas dataframe with two columns: 'itemID' and 'wordCount'. The 'itemID' column contains the name of the input structure, and the 'wordCount'
            column contains the word count of the target field for each input structure.
    
    returns:
        fig : matplotlib figure object
            A figure object containing the histogram of the word counts
    
    """
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np
    import pandas as pd

    # create a figure
    fig,ax = plt.subplots(figsize=figSize)

    # plot the data
    sns.distplot(wordCountDF['wordCount'],bins=np.arange(0,wordCountDF['wordCount'].max()+binSize,binSize),kde=False,ax=ax)
    # set the title
    ax.set_title('Word count histogram')
    # set the x axis label
    ax.set_xlabel('Word count')
    # set the y axis label
    ax.set_ylabel('Number of entries')

    return fig