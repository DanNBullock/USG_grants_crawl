"""
This set of functions is for the production of figures


"""

def plotNullValue_barPlot(dataCompletenessDF,figSize=(10,5)):
    """
    This function takes in the table generated by analyzeData.quantifyDataCompleteness, which outputs:

    dataCompletenessDF : pandas dataframe
        A pandas dataframe with two columns:  the first column is the field name and the second column is the number of empty / null values for that field.
        The last row is the total number of records assessed.

    and produces a seaborn-based bar plot of the number of null values for each field.
    The last row is omitted from the plot, as it is the total number of records assessed, 
    but it is used to set the y-axis limits.

    Input:
        dataCompletenessDF : pandas dataframe
            A pandas dataframe with two columns:  the first column is ('fieldName'): the field name and the second column ('numEmpty') is the number of empty / null values for that field.
            The last row is the total number of records assessed.  Generated by analyzeData.quantifyDataCompleteness
        figSize : tuple
            A tuple of two integers, the first being the width of the figure and the second being the height of the figure.
        
    Output:
        fig : matplotlib figure object
            A figure object containing the bar plot of the number of null values for each field.
    """  
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np
    import pandas as pd

    # get the max value from the last row of the dataframe
    maxVal = dataCompletenessDF.iloc[-1,1]

    # remove the last row from the dataframe
    dataCompletenessDF = dataCompletenessDF.iloc[:-1,:]

    # create a figure
    fig,ax = plt.subplots(figsize=figSize)

    # go through the column names and remove all newlines
    dataCompletenessDF['fieldName'] = dataCompletenessDF['fieldName'].str.replace('\n','')
    # determine if the field names look like camel case, and if so, add a newline before the third capital if the line is more than 30 characters long
    # first, get the length of the field names
    fieldNameLengths = dataCompletenessDF['fieldName'].str.len()
    # get the indices of the field names that are longer than 30 characters
    longFieldNames = fieldNameLengths > 30
    # get the field names that are longer than 30 characters
    longFieldNames = dataCompletenessDF.loc[longFieldNames,'fieldName']
    # get the indices of the field names that are camel case
    camelCaseFieldNames = longFieldNames.str.contains('[a-z][A-Z]')
    # get the field names that are camel case
    camelCaseFieldNames = longFieldNames.loc[camelCaseFieldNames]
    # get the indices of the field names that are camel case and longer than 30 characters
    camelCaseFieldNames = camelCaseFieldNames.index
    # add a newline before the third capital letter
    dataCompletenessDF.loc[camelCaseFieldNames,'fieldName'] = dataCompletenessDF.loc[camelCaseFieldNames,'fieldName'].str.replace('([a-z])([A-Z])','\\1\n\\2',regex=True)
    #hopefully that should prevent a bit of clutter

    # plot the data
    sns.barplot(x='fieldName',y='numEmpty',data=dataCompletenessDF,ax=ax)
    # set the y-axis limits
    ax.set_ylim([0,maxVal])
    # set the x axis labels to be rotated 60 degrees
    ax.set_xticklabels(ax.get_xticklabels(),rotation=60)
    # set the title
    ax.set_title('Number of null values per field')
    # set the y axis label
    ax.set_ylabel('Number of null values')
    # set the x axis label
    ax.set_xlabel('Field name')

    # if there were any long field names, change the font size of the x axis labels
    if len(longFieldNames) > 0:
        ax.tick_params(axis='x',labelsize=8)
        # also reduce the spacing between separate lines of text in the x axis labels by modifyin the linespacing parameter
        for label in ax.get_xticklabels():
            label.set_linespacing(0.5)



    # TODO: implement some adaptivness here to log scale the y axis if a sufficient number of values are too small relative to the max value
    
    return fig

def plotWordCount_histogram(wordCountDF,figSize=(10,5),binSize=3):
    """
    Takes the resultsDF from wordCountForField and plots a histogram of the word counts
    
    input:
        wordCountDF : pandas dataframe
            A pandas dataframe with two columns: 'itemID' and 'wordCount'. The 'itemID' column contains the name of the input structure, and the 'wordCount'
            column contains the word count of the target field for each input structure.
    
    returns:
        fig : matplotlib figure object
            A figure object containing the histogram of the word counts
    
    """
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np
    import pandas as pd

    # create a figure
    fig,ax = plt.subplots(figsize=figSize)

    # plot the data
    sns.histplot(wordCountDF['wordCount'],bins=np.arange(0,wordCountDF['wordCount'].max()+binSize,binSize),kde=False,ax=ax)
    # set the title
    ax.set_title('Word count histogram')
    # set the x axis label
    ax.set_xlabel('Word count')
    # set the y axis label
    ax.set_ylabel('Number of entries')

    return fig

def keywordCount_barPlot(keywordCountDF,figSize=(10,5),fig=None,ax=None,figSavePath=None):
    """
    This function takes in the keywordCount dataframe from analyzeData.countsFromCoOccurrenceMatrix
    and produces a seaborn bar plot of the number of occurrences of each keyword.
    The column headers for the keywordCountDF should be:

    (from the docstring for analyzeData.countsFromCoOccurrenceMatrix)
    'itemID' and 'count'. The 'itemID' column contains the label of the row or column of the input matrix, and the 'count'
        column contains the count of the number of times each item occurs in the in the input matrix. 
    
    Input:
        keywordCountDF : pandas dataframe
            A pandas dataframe with two columns: 'itemID' and 'count'. The 'itemID' column contains the label of the row or column of the input matrix, and the 'count'
            column contains the count of the number of times each item occurs in the in the input matrix. 
        figSize : tuple
            A tuple of two integers, the first being the width of the figure and the second being the height of the figure.'
        fig : matplotlib figure object
            A figure object to plot the bar plot on.  If None, a new figure will be created.
        ax : matplotlib axis object
            An axis object to plot the bar plot on.  If None, a new axis will be created.
        figSavePath : string
            A string containing the path to save the figure to.  If None, the figure will not be saved.

    Output:
        fig : matplotlib figure object
            A figure object containing the bar plot of the number of occurrences of each keyword.
        ax : matplotlib axis object
            An axis object containing the bar plot of the number of occurrences of each keyword.
    """
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np
    import pandas as pd

    # create a figure if one was not provided
    if fig is None:
        fig,ax = plt.subplots(figsize=figSize)

    # plot the data
    sns.barplot(x='itemID',y='count',data=keywordCountDF,ax=ax)
    # set the x axis labels to be rotated 60 degrees
    ax.set_xticklabels(ax.get_xticklabels(),rotation=60)
    # set the title
    ax.set_title('Keyword counts')
    # set the y axis label
    ax.set_ylabel('Number of occurrences')
    # set the x axis label
    ax.set_xlabel('Keyword')

    # there shouldn't be any exceptionally long keywords, nor any multi line keywords, so no need to do any special formatting here

    # save the figure if a save path was provided
    if figSavePath is not None:
        fig.savefig(figSavePath,bbox_inches='tight')
        

    return fig,ax

def coOccurrenceMatrix_heatmapPlot(matrixDF,rowTitle='',colTitle='',figSize=(6.5,5),fig=None,ax=None,colorMap='viridis',figSavePath=None):
    """
    This function takes in a matrix-like pandas dataframe and generates a heat map plot of the data.

    Inputs:
        matrixDF : pandas dataframe
            A pandas dataframe containing the matrix data to plot.  The index and column names will be used as the row and column labels, so make sure they are set appropriately.
        rowTitle : string
            A string containing the title for the vertical axis of the matrix / plot.  If None or '' then no axis label will be applied.
        colTitle : string
            A string containing the title for the horizontal axis of the matrix / plot.  If None or '' then no axis label will be applied.
        figSize : tuple
            A tuple of two integers, the first being the width of the figure and the second being the height of the figure.'
        fig : matplotlib figure object
            A figure object to plot the bar plot on.  If None, a new figure will be created.
        ax : matplotlib axis object
            An axis object to plot the bar plot on.  If None, a new axis will be created.
        colorMap : string
            A string containing the name of the color map to use for the heat map.  See https://matplotlib.org/stable/tutorials/colors/colormaps.html for a list of available color maps.
        figSavePath : string
            A string containing the path to save the figure to.  If None, the figure will not be saved.
            
    Outputs:
        fig : matplotlib figure object
            A figure object containing the heat map plot of the matrix data.
        ax : matplotlib axis object
            An axis object containing the heat map plot of the matrix data.

    """
    import matplotlib.pyplot as plt
    import seaborn as sns

    # create a figure if one was not provided
    if fig is None:
        fig,ax = plt.subplots(figsize=figSize)

    # plot the data
    sns.heatmap(matrixDF,ax=ax,cmap=colorMap, cbar_kws={'label': 'Occurrence count'}, cbar=True)
    # set the titles
    ax.set_title('Co-occurrence matrix for ' + rowTitle + ' by ' + colTitle)
    # set the y axis label
    ax.set_ylabel(rowTitle)
    # set the x axis label
    ax.set_xlabel(colTitle)

    # save the figure if a save path was provided
    if figSavePath is not None:
        # if it is '', then save using the default name
        if figSavePath == '':
            defaultName='coOccurrenceMatrix_' + rowTitle + '_by_' + colTitle + '.png'
            figSavePath = defaultName
        # in any case you should have the figure name by now, so save it
        fig.savefig(figSavePath,bbox_inches='tight')
    
    # return the figure and axis objects
    return fig,ax 



